import { EzComponent } from "./EzComponent";
/**
 * @description Decorator to bind a specific style string property to an element
 * @param id the element to bind the property to
 * @param style the style to bind (i.e. background-color, left, top, etc.)
 * @param transform an optional function to transform the value before it is set on the element
 * @returns DecoratorCallback
 * @group Bind Decorators
 * @overload
 * @export
 * @example
 * //This will set the background color of the div with id myDiv to the value in backgroundColor
 * @BindStyle("myDiv", "backgroundColor")
 * public backgroundColor: string = "red";
 */
export declare function BindStyle<This extends EzComponent, K extends keyof CSSStyleDeclaration, Value extends CSSStyleDeclaration[K]>(id: string, style: K, transform?: (this: This, value: Value) => CSSStyleDeclaration[K]): (target: undefined, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind a specific style non-string property to an element
 * @param id the element to bind the property to
 * @param style the style to bind (i.e. background-color, left, top, etc.)
 * @param transform a function to transform the value to a valid style name before it is set on the element
 * @returns DecoratorCallback
 * @group Bind Decorators
 * @overload
 * @export
 * @example
 * //This will set the background color of the div with id myDiv to the red if the property is true, or blue if it is false
 * @BindStyle("myDiv", "backgroundColor",(value: boolean) => value ? "red" : "blue")
 * public backgroundColor: boolean=true;
 */
export declare function BindStyle<This extends EzComponent, K extends keyof CSSStyleDeclaration, Value>(id: string, style: K, transform: (this: This, value: Value) => CSSStyleDeclaration[K]): (target: undefined, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind the className property to an element.
 * @param id the element to bind the property to
 * @param transform an optional function to transform the value to a string before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @overload
 * @example
 * //This will set the CSS class of the div with id myDiv to the value in cssClass
 * @BindCSSClass("myDiv")
 * public cssClass: string = "myCSSClass";
 */
export declare function BindCSSClass<This extends EzComponent, Value extends string>(id: string, transform?: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind the className property to an element.
 * @param id the element to bind the property to
 * @param transform a function to transform the value to a string before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will set the CSS class of the div with id myDiv to the value in cssClass
 * @BindCSSClass("myDiv")
 * public cssClass: string = "myCSSClass";
 */
export declare function BindCSSClass<This extends EzComponent, Value>(id: string, transform: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind the innerHtml or value property to an element.
 * @param id the element to bind the property to
 * @param transform an optional function to transform the value before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will display Hello World in the div with id myDiv
 * @BindValue("myDiv")
 * public hello: string = "Hello World";
 * @example
 * //This will display Hello World in the div with id myDiv in upper case
 * @BindValue("myDiv", (value: string) => value.toUpperCase())
 * public hello: string = "Hello World";
 * @example
 * //This will display the value of the variable in the input box with id myInput
 * @BindValue("myInput")
 * public hello: string = "Hello World";
 * @example
 * //This will display the value of the variable in the input box with id myInput in upper case
 * @BindValue("myInput", (value: string) => value.toUpperCase())
 * public hello: string = "Hello World";
 *
 */
export declare function BindValue<This extends EzComponent, Value extends string>(id: string, transform?: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind the innerHtml property to an element.
 * @param id the element to bind the property to
 * @param transform a function to transform the value before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will display Hello World in the div with id myDiv
 * @BindValue("myDiv", (value: boolean) => value ? "Hello" : "Goodbye")
 * public hello: boolean = true;
 * @example
 * //This will display hello world in the input box with id myInput
 * @BindValue("myInput", (value: string) => value.toUpperCase())
 * public hello: string = "Hello World";
 */
export declare function BindValue<This extends EzComponent, Value>(id: string, transform: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind any attribute of an element to a property
 * @param id the element to bind the property to
 * @param {string}attribute the attribute to bind (empty string deletes the attribute from the element)
 * @param transform an optional function to transform the value before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will set the src attribute of the img with id myImg to the value of the src property
 * @BindAttribute("myImg", "src")
 * public src: string = "https://via.placeholder.com/150";
 * @example
 * @BindAttribute("myImg", "src", (val: string) => `https://test.com/images/${val})
 * public src: string = "test.png";
 */
export declare function BindAttribute<This extends EzComponent, K extends string, Value extends string>(id: string, attribute: K, transform?: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind any attribute of an element to a property
 * @param id the element to bind the property to
 * @param attribute the attribute to bind (empty string deletes the attribute from the element)
 * @param transform a function to transform the value to a string before it is set on the element
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will set the src attribute of the img with id myImg to the value of the src property
 * @BindAttribute("myImg", "disabled", (val: boolean) => val ? "disabled" : "")
 * disabled:boolean=false;
 */
export declare function BindAttribute<This extends EzComponent, K extends string, Value>(id: string, attribute: K, transform: (this: This, value: Value) => string): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind a list to an element.  The element will be cloned for each element in the list and the value of the element will be set to the value in the list
 * @param id the element to bind the property to
 * @param transform a function to transform the value to a string[] before it is set on the element
 * @param replaceInnerHtml if true, the innerHTML of the element will be replaced with the value in the list, otherwise the value will be set as the value of the element
 * @param listItemId the id of the element to set the value of in the list item
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will create a list of divs with the values in the list that are
 * //siblings to myDiv.  myDiv itself will be hidden
 * @BindList("myDiv")
 * public list: number[] = ["one", "two", "three"];
 */
export declare function BindList<This extends EzComponent, Value extends string[]>(id: string, transform?: (this: This, value: Value) => string[], replaceInnerHtml?: boolean, listItemId?: string[]): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind a list to an element.  The element will be cloned for each element in the list and the value of the element will be set to the value in the list
 * @param id the element to bind the property to
 * @param transform a function to transform the value to a string[] before it is set on the element
 * @param replaceInnerHtml if true, the innerHTML of the element will be replaced with the value in the list, otherwise the value will be set as the value of the element
 * @param listItemId the id of the element to set the value of in the list item
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will create a list of divs with the values in the list that are
 * //siblings to myDiv.  myDiv itself will be hidden
 * @BindList("myDiv", (value: number[]) => value.map((v)=>v.toString()))
 * public list: number[] = [1,2,3];
 */
export declare function BindList<This extends EzComponent, Value extends any[]>(id: string, transform: (this: This, value: Value) => string[], replaceInnerHtml?: boolean, listItemId?: string[]): (target: any, context: ClassFieldDecoratorContext<This, Value>) => any;
/**
 * @description Decorator to bind the cssClassName property if the boolean property is true
 * @param id the element to bind the property to
 * @param cssClassName the class name to add
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will add the css class myCSSClass to the div with id myDiv if the enabled property is true
 * @BindCSSClassToBoolean("myDiv", "myCSSClass")
 * public enabled: boolean = true;
 */
export declare function BindCSSClassToBoolean<This extends EzComponent, Value extends boolean>(id: string, cssClassName: string): (target: any, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind the disabled attribute of an element to a boolean
 * @param id the element to bind the property to
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will disable the button with id myButton if the disabled property is true
 * @BindDisabledToBoolean("myButton")
 * public disabled: boolean = true;
 */
export declare function BindDisabledToBoolean<This extends EzComponent, Value extends boolean>(id: string): (target: any, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind the visibility of an element to a boolean
 * @param id the element to bind the property to
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will hide the div with id myDiv1 if the visible property is false
 * @BindVisibleToBoolean("myDiv1")
 * public visible: boolean = true;
 */
export declare function BindVisibleToBoolean<This extends EzComponent, Value extends boolean>(id: string): (target: undefined, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind the checked/unchecked value of a checkbox input to a boolean
 * @param id the element to bind the property to
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will check the checkbox with id myCheckbox if the checked property is true
 * @BindCheckedToBoolean("myCheckbox")
 * public checked: boolean = true;
 */
export declare function BindCheckedToBoolean<This extends EzComponent, Value extends boolean>(id: string): (target: any, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind the value of an element to a number
 * @param id the element to bind the property to
 * @param append an optional string to append to the number before setting the value
 * @returns DecoratorCallback
 * @export
 * @group Bind Decorators
 * @example
 * //This will bind the text (value) of the div with id myDiv1 to the number in value
 * @BindValueToNumber("myDiv1")
 * public value: number = 100;
 */
export declare function BindValueToNumber<This extends EzComponent, Value extends number>(id: string, append?: string): (target: any, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind a specific style to a number, and optionally append a string to the value
 * @param id the element to bind the property to
 * @param style the style to bind (i.e. background-color, left, top, etc.)
 * @Param optional string to append to the number before setting the value
 * @returns DecoratorCallback
 * @overload
 * @export
 * @group Bind Decorators
 * @example
 * //This will set the width of the div to the number in width
 * @BindStyleToNumber("myDiv", "width","%")
 * public width: number = 100;
 */
export declare function BindStyleToNumber<K extends keyof CSSStyleDeclaration, This extends EzComponent, Value extends number>(id: string, style: K, append?: string): (target: undefined, context: ClassFieldDecoratorContext<EzComponent, Value>) => any;
/**
 * @description Decorator to bind a specific style to a number, and append a 'px' to the value
 * @param id the element to bind the property to
 * @param style the style to bind (i.e. background-color, left, top, etc.)
 * @returns DecoratorCallback
 * @overload
 * @export
 * @group Bind Decorators
 * @example
 * //This will set the width of the div to the number in width
 * @BindStyleToNumberAppendPx("myDiv", "width")
 * public width: number = 100;
 */
export declare function BindStyleToNumberAppendPx<K extends keyof CSSStyleDeclaration, This extends EzComponent, Value extends number>(id: string, style: K): (target: undefined, context: ClassFieldDecoratorContext<EzComponent, number>) => any;
